% count_occurrences/3 counts the number of occurrences of an element in a list
count_occurrences(_, [], 0).  % If the list is empty, the count is 0
count_occurrences(X, [X|T], N) :-  % If the head of the list matches the element we're counting...
    count_occurrences(X, T, N1),  % ...count the occurrences of the element in the tail of the list...
    N is N1 + 1.  % ...and add 1 to the count
count_occurrences(X, [Y|T], N) :-  % If the head of the list does not match the element we're counting...
    X \= Y,  % ...and the elements are not equal...
    count_occurrences(X, T, N).  % ...count the occurrences of the element in the tail of the list

% array_statistics/2 calculates the appearance statistics of each element in a list
array_statistics(Array, Stats) :-
    sort(Array, Unique),  % Remove duplicates from the list and sort it
    findall((X, Count), (  % For each unique element X in the list...
        member(X, Unique),  % ...check if X is a member of the unique list...
        count_occurrences(X, Array, Count)  % ...and count the number of occurrences of X in the original list
    ), Stats).  % Collect the element and count pairs into a list called Stats
